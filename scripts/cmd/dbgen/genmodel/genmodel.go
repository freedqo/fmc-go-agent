package genmodel

import (
	"fmt"
	"github.com/freedqo/fmc-go-agent/scripts/cmd/dbgen/gdb"
	"github.com/freedqo/fmc-go-agent/scripts/cmd/dbgen/options"
	"github.com/freedqo/fmc-go-agent/scripts/cmd/dbgen/utils"
	"github.com/urfave/cli/v2"
	"os"
	"strings"
	"text/template"
)

func GenModel(c *cli.Context) error {
	for _, db := range options.DbList {
		err := CreatModels(c.String("addr"), db, c.String("user"), c.String("pwd"))
		if err != nil {
			return err
		}
	}
	return nil
}

func CreatModels(addr string, dbname string, user string, password string) error {
	_, g, _, dbMeat, err := gdb.NewGdbConn(addr, dbname, user, password)
	if err != nil {
		return err
	}
	// 生成所有表的模型
	tables := g.GenerateAllTable()
	// 注入模型
	g.ApplyBasic(tables...)
	// 执行代码生成
	g.Execute()
	// 创建自动迁移文件
	modelPath := utils.JoinXdDirPath(options.ModelRootPath, dbname, options.ModelDirName)
	err = CreatAutoMigrate(options.ModelDirName, modelPath, dbMeat)
	if err != nil {
		return err
	}
	// 创建查询结构体文件
	queryFilePath := utils.JoinXdDirPath(options.ModelRootPath, dbname, options.ModelDirName)
	err = CreatQueryStruct(queryFilePath, dbMeat)
	if err != nil {
		return err
	}

	return nil
}

var tmpCreatAutoMigrate = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package {{.PkgName}}

import (
    "gorm.io/gorm"
)

func GetModels() []interface{} {
    m := make([]interface{}, 0)
    {{- range $index, $model := .Models}}
    v{{$index}} := {{$model}}{}
    m = append(m, v{{$index}})
    {{- end}}
    return m
}

func AutoMigrate(db *gorm.DB) error {
    if err := db.AutoMigrate(GetModels()...); err != nil {
        return err
    }
    return nil
}
`

func CreatAutoMigrate(pkn string, modelPath string, dbMeta *gdb.DbMeta) error {
	// 定义模板数据
	var data struct {
		PkgName string
		Models  []string
	}
	data.PkgName = pkn
	data.Models = make([]string, 0)
	for _, md := range dbMeta.TableMeta {
		data.Models = append(data.Models, md.ModelStructName)
	}
	// 要写入的文件路径
	filePath := utils.JoinXdFilePath(modelPath, options.AutoMigrateFileName)
	fmt.Printf("处理数据库%s,生成表结构自动迁移文件,路径：%s\r\n", dbMeta.DbName, filePath)
	// 解析模板
	tmpl, err := template.New(options.AutoMigrateFileName).Parse(tmpCreatAutoMigrate)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil
}

var tmpCreatQueryStruct = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
    "github.com/freedqo/fmc-go-agent/internal/fmc-go-agent-server/model/dalm/dbm"
)

// {{.ModelStructName}}_QueryReq 是用于查询 {{.ModelStructName}} 表的请求结构体
type {{.ModelStructName}}_QueryReq struct {
	{{- range $field := .Fields}}
    // {{$field.ColumnComment}}
    {{$field.Name}} *string ` + "`" + `json:"{{$field.Name}}" column:"{{$field.ColumnName}}" form:"{{$field.Name}}"` + "`" + `
	{{- end}}
    // 排序字段，例如 "字段名 asc" 或 "字段名 desc"
    OrderBy *string ` + "`" + `json:"OrderBy" form:"OrderBy"` + "`" + `
    // 是否模糊查询
    IsLike bool ` + "`" + `json:"IsLike" form:"IsLike"` + "`" + `
    // 分页信息
    Page *dbm.Page ` + "`" + `json:"Page" form:"Page"` + "`" + `
}
`

// QueryInfo 用于存储查询结构体相关信息
type QueryInfo struct {
	ModelStructName string
	Fields          []*gdb.Field
}

func CreatQueryStruct(path string, dbMeta *gdb.DbMeta) error {
	for _, md := range dbMeta.TableMeta {
		// 要写入的文件路径
		filename := strings.ToLower(md.ModelStructName) + "_queryreq.gen.go"
		filePath := path + filename
		fmt.Printf("处理数据库%s,生成通用查询请求结构体文件,路径：%s\r\n", dbMeta.DbName, filePath)
		// 解析模板
		tmpl, err := template.New(filename).Parse(tmpCreatQueryStruct)
		if err != nil {
			return err
		}

		// 生成文件
		file, err := os.Create(filePath)
		if err != nil {
			file.Close()
			return err
		}
		err = tmpl.Execute(file, md)
		if err != nil {
			file.Close()
			return err
		}
		file.Close()
	}
	return nil
}
