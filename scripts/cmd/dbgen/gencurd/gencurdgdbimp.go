package gencurd

import (
	"fmt"
	"github.com/freedqo/fmc-go-agents/scripts/cmd/dbgen/gdb"
	"github.com/freedqo/fmc-go-agents/scripts/cmd/dbgen/options"
	"github.com/freedqo/fmc-go-agents/scripts/cmd/dbgen/utils"
	"os"
	"sort"
	"strings"
	"text/template"
)

// CreatGdbDbImp 创建接口实现文件
func CreatGdbDbImp(dbName string, dMeta *gdb.DbMeta) error {
	dbGenPath := utils.JoinXdDirPath(options.DbGdbRootPath, dbName+"_gdb")

	//创建目录
	if err := os.MkdirAll(dbGenPath, os.ModePerm); err != nil {
		return err
	}
	// 创建数据库dbName的if.go
	for _, tb := range dMeta.TableMeta {
		lowerTableName := strings.ToLower(tb.TableName)
		tbPknPath := utils.JoinXdDirPath(dbGenPath, strings.ToLower(lowerTableName)+"_gdb")

		//创建目录
		if err := os.MkdirAll(tbPknPath, os.ModePerm); err != nil {
			return err
		}

		err := CreatGdbGenDbImp(tbPknPath, dbName, lowerTableName, tb.ModelStructName, tb)
		if err != nil {
			return err
		}

		err = CreatGdbSelfDbImp(tbPknPath, dbName, lowerTableName)
		if err != nil {
			return err
		}

		err = CreatGdbGenTableImp(tbPknPath, dbName, lowerTableName, tb.ModelStructName)
		if err != nil {
			return err
		}
	}

	err := CreatGdbOneDbImp(dbGenPath, dMeta)
	if err != nil {
		return err
	}

	return nil
}

var tmpCreatGdbGenTableImp = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package {{.TableName}}_gdb

import (
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/{{.DbName}}_if/{{.TableName}}_if"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/model/dalm/dbm/{{.DbName}}/query"
	"gorm.io/gorm"
)

func New(gdb *gorm.DB, genQ *query.Query) {{.TableName}}_if.If {
	return &{{.ModelStructName}}_gdb{
		genIf:  newGenIF(gdb),
		selfIf: newSelfIF(gdb, genQ),
	}
}

type {{.ModelStructName}}_gdb struct {
	genIf  {{.TableName}}_if.GenIf
	selfIf {{.TableName}}_if.SelfIf
}

func (c *{{.ModelStructName}}_gdb) Gen() {{.TableName}}_if.GenIf {
	return c.genIf
}

func (c *{{.ModelStructName}}_gdb) Self() {{.TableName}}_if.SelfIf {
	return c.selfIf
}
`

func CreatGdbGenTableImp(path string, dbName string, lowTableName string, modelStructName string) error {

	// 定义模板数据
	var data struct {
		DbName          string
		TableName       string
		ModelStructName string
	}
	data.DbName = dbName
	data.TableName = strings.ToLower(lowTableName)
	data.ModelStructName = modelStructName
	// 解析模板并生成文件
	// 要写入的文件路径
	filename := options.GdbImpFileName
	filePath := utils.JoinXdFilePath(path, filename)

	fmt.Printf("处理数据库%s,生成表%s,基于Gorm的集成数据库读写接口文件,路径：%s\r\n", dbName, lowTableName, filePath)

	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatGdbGenTableImp)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil

}

var tmpCreatGdbGenDbImp = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package {{.TableName}}_gdb

import (
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/{{.DbName}}_if/{{.TableName}}_if"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/model/dalm/dbm/{{.DbName}}/model"
	"gorm.io/gorm"
)

func newGenIF(gdb *gorm.DB) {{.TableName}}_if.GenIf {
	return &GenIF{
		db: gdb,
	}
}

type GenIF struct {
	db *gorm.DB
}

// Add 批量添加数据
func (g *GenIF) Add(data ...*model.{{.ModelStructName}}) error {
	batchSize := 1000 // 每次插入 1000 条记录
	// 开启事务
	tx := g.db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()
	if tx.Error != nil {
		return tx.Error
	}
	for i := 0; i < len(data); i += 1000 {
		end := i + batchSize
		if end > len(data) {
			end = len(data)
		}
		batch := data[i:end]
		if err := tx.Create(batch).Error; err != nil {
			tx.Rollback()
			return err
		}
	}
	// 提交事务
	if err := tx.Commit().Error; err != nil {
		return err
	}
	return nil
}

// Upt 批量更新数据
func (g *GenIF) Upt(data ...*model.{{.ModelStructName}}) error {
	for _, item := range data {
		if err := g.db.Save(item).Error; err != nil {
			return err
		}
	}
	return nil
}

// Save 批量保存数据
func (g *GenIF) Save(data ...*model.{{.ModelStructName}}) error {
	return g.db.Save(data).Error
}

// Del 批量删除数据
func (g *GenIF) Del(data ...*model.{{.ModelStructName}}) error {
	return  g.db.Delete(data).Error
}

// First 查询第一条数据
func (g *GenIF) First(query *model.{{.ModelStructName}}) (data *model.{{.ModelStructName}}, err error) {
	data = &model.{{.ModelStructName}}{}
	db := g.db

	if query != nil {
		db = db.Where(query)
	}

	result := db.First(data)
	err = result.Error
	if err == gorm.ErrRecordNotFound {
		data = nil
		err = nil
	}
	return data, err
}

// Find 根据查询条件查询数据
func (g *GenIF) Find(query *model.{{.ModelStructName}}_QueryReq) (data []*model.{{.ModelStructName}}, total int64, err error) {
	db := g.db

	if query != nil {
		// 定义一个通用函数来构建查询条件
		addQueryCondition := func(field string, value *string, isLike bool) {
			if value != nil {
				if isLike {
					db = db.Where(field+" LIKE ?", "%"+*value+"%")
				} else {
					db = db.Where(field+" = ?", *value)
				}
			}
		}

		// 调用通用函数添加各个字段的查询条件
		{{- range $qf := .QueryFiles}}
		// {{$qf.Des}}
		addQueryCondition("{{$qf.ColumnName}}", query.{{$qf.Name}}, query.IsLike)
		{{- end}}

		// 排序
		if query.OrderBy != nil {
			db = db.Order(*query.OrderBy)
		}

		// 分页
		if query.Page != nil {
			offset := ((*query.Page).Index - 1) * (*query.Page).Size
			db = db.Offset(int(offset)).Limit((*query.Page).Size)
		}
	}

	// 查询总记录数
	countDB := db.Session(&gorm.Session{})
	err = countDB.Model(&model.{{.ModelStructName}}{}).Count(&total).Error
	if err != nil {
		return nil, 0, err
	}

	// 查询数据
	err = db.Find(&data).Error
	return data, total, err
}

var _ {{.TableName}}_if.GenIf = &GenIF{}
`

// CreatGdbGenDbImpFieldInfo 字段信息结构体
type CreatGdbGenDbImpFieldInfo struct {
	Name       string
	ColumnName string
	Des        string
}

// CreatGdbGenDbImpQueryInfo 用于存储查询结构体相关信息
type CreatGdbGenDbImpQueryInfo struct {
	TableName string
	Fields    []CreatGdbGenDbImpFieldInfo
}

func CreatGdbGenDbImp(path string, dbName string, lowTableName string, stn string, qMeta *gdb.QueryStructMeta) error {
	// 定义模板数据
	var data struct {
		DbName          string
		TableName       string
		ModelStructName string
		QueryFiles      []CreatGdbGenDbImpFieldInfo
	}
	data.DbName = dbName
	data.TableName = strings.ToLower(lowTableName)
	data.ModelStructName = stn
	data.QueryFiles = make([]CreatGdbGenDbImpFieldInfo, 0)

	for _, col := range qMeta.Fields {
		fieldInfo := CreatGdbGenDbImpFieldInfo{
			Name:       utils.FirstToUpper(col.Name),
			Des:        col.ColumnComment,
			ColumnName: col.ColumnName,
		}
		data.QueryFiles = append(data.QueryFiles, fieldInfo)
	}

	// 解析模板并生成文件
	// 要写入的文件路径
	filename := options.GenIFImpFileName
	filePath := utils.JoinXdFilePath(path, filename)
	fmt.Printf("处理数据库%s,生成表%s,基于Gorm的通用数据库读写接口文件,路径：%s\r\n", dbName, lowTableName, filePath)

	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatGdbGenDbImp)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil

}

var tmpCreatGdbSelfDbImp = `package {{.TableName}}_gdb

import (
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/{{.DbName}}_if/{{.TableName}}_if"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/model/dalm/dbm/{{.DbName}}/query"
	"gorm.io/gorm"
)

func newSelfIF(gdb *gorm.DB, genQ *query.Query) {{.TableName}}_if.SelfIf {
	return &SelfIF{
		db:   gdb,
		genQ: genQ,
	}
}

type SelfIF struct {
	db   *gorm.DB
	genQ *query.Query
}

var _ {{.TableName}}_if.SelfIf = &SelfIF{}
`

func CreatGdbSelfDbImp(path string, dbName string, lowTableName string) error {

	// 定义模板数据
	var data struct {
		DbName    string
		TableName string
	}
	data.DbName = dbName
	data.TableName = strings.ToLower(lowTableName)
	// 解析模板并生成文件
	// 要写入的文件路径
	filename := options.SelfIFImpFileName
	filePath := utils.JoinXdFilePath(path, filename)

	//判断self.go文件是否存在
	isTbExtSelfDb, err := utils.FileExists(filePath)
	if err != nil {
		return err
	}
	if isTbExtSelfDb {
		return nil
	}
	fmt.Printf("处理数据库%s,生成表%s,基于Gorm的自定义数据库读写接口文件,路径：%s\r\n", dbName, lowTableName, filePath)
	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatGdbSelfDbImp)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil

}

var tmpCreatGdbOneDbImp = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package {{.DbName}}_gdb

import (
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/{{.DbName}}_if"
  	{{- range $tb := .Tbs}}
  	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/{{$tb.DbName}}_if/{{$tb.TableName}}_if"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/gdb/{{$tb.DbName}}_gdb/{{$tb.TableName}}_gdb"
    {{- end}}
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/model/dalm/dbm/{{.DbName}}/model"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/model/dalm/dbm/{{.DbName}}/query"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/store/log"
	"github.com/freedqo/fmc-go-agents/pkg/fgrom"
    "gorm.io/gorm"
)

func New(opt *fgrom.Option) {{.DbName}}_if.If {
	conn := opt.Open("{{.DbName}}")
	if conn == nil {
		panic("db conn is nil")
	}
	gdb, err := fgrom.NewFGorm(log.SysLog(), conn)
	if err != nil {
		panic(err)
	}
	// 自动迁移表结构
	if opt.IsAutoMigrate{
		model.AutoMigrate(gdb)
	}

	genQ := query.Use(gdb)
	db := Db{
		gdb:            gdb,
		genQ:           genQ,
	{{- range $tb := .Tbs}}
		{{$tb.TableName}}: {{$tb.TableName}}_gdb.New(gdb, genQ),
    {{- end}}
	}

	return &db
}

type Db struct {
	gdb            *gorm.DB
	genQ           *query.Query
	{{- range $tb := .Tbs}}
	{{$tb.TableName}} {{$tb.TableName}}_if.If
    {{- end}}
}

func (d *Db) GenQ() *query.Query {
	return d.genQ
}

{{- range $tb := .Tbs}}
func (d *Db) {{$tb.ModelStructName}}() {{$tb.TableName}}_if.If {
	return d.{{$tb.TableName}}
}
{{- end}}

var _ {{.DbName}}_if.If = &Db{}
`

type CreatGdbOneDbImpTBS struct {
	ModelStructName string
	TableName       string
	DbName          string
}

func CreatGdbOneDbImp(path string, dMeta *gdb.DbMeta) error {
	// 定义模板数据
	var data struct {
		DbName string
		Tbs    []CreatGdbOneDbImpTBS
	}
	data.DbName = dMeta.DbName
	data.Tbs = make([]CreatGdbOneDbImpTBS, 0)
	for _, tb := range dMeta.TableMeta {
		data.Tbs = append(data.Tbs, CreatGdbOneDbImpTBS{
			ModelStructName: tb.ModelStructName,
			TableName:       strings.ToLower(tb.TableName),
			DbName:          tb.DbName,
		})
	}
	sort.Slice(data.Tbs, func(i, j int) bool {
		return data.Tbs[i].TableName < data.Tbs[j].TableName
	})

	// 解析模板并生成文件
	filename := options.DbGenFileName
	filePath := utils.JoinXdFilePath(path, filename)

	fmt.Printf("生成数据库%s,基于Gorm的集成数据库读写接口文件,路径：%s\r\n", dMeta.DbName, filePath)

	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatGdbOneDbImp)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil

}

var tmpCreatGdbAllDbImp = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gdb

import (
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif"
	{{- range $db := .Dbs}}
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/{{$db.DbName}}_if"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/gdb/{{$db.DbName}}_gdb"
	{{- end}}
    "github.com/freedqo/fmc-go-agents/pkg/fgrom"
)

func New(opt *fgrom.Option) dbif.If {
	return &db{
	{{- range $db := .Dbs}}
		{{$db.DbName}}_gdb: {{$db.DbName}}_gdb.New(opt),
	{{- end}}
	}
}

type db struct {
	{{- range $db := .Dbs}}
	{{$db.DbName}}_gdb {{$db.DbName}}_if.If
	{{- end}}
}

{{- range $db := .Dbs}}
func (d *db) {{$db.DbNameUp}}() {{$db.DbName}}_if.If {
	return d.{{$db.DbName}}_gdb
}

{{- end}}
`

type CreatGdbAllDbImpDbnImp struct {
	DbName   string
	DbNameUp string
}

func CreatGdbAllDbImp(path string, dbMap map[string]string) error {
	// 定义模板数据
	var data struct {
		Dbs []CreatGdbAllDbImpDbnImp
	}
	data.Dbs = make([]CreatGdbAllDbImpDbnImp, 0)
	for k, v := range dbMap {
		data.Dbs = append(data.Dbs, CreatGdbAllDbImpDbnImp{
			DbName:   k,
			DbNameUp: v,
		})
	}
	sort.Slice(data.Dbs, func(i, j int) bool {
		return data.Dbs[i].DbName < data.Dbs[j].DbName
	})
	// 要写入的文件路径
	filename := options.GdbImpFileName
	filePath := utils.JoinXdFilePath(path, filename)

	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatGdbAllDbImp)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil
}
