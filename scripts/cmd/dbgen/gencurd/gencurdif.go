package gencurd

import (
	"fmt"
	"github.com/freedqo/fmc-go-agent/scripts/cmd/dbgen/gdb"
	"github.com/freedqo/fmc-go-agent/scripts/cmd/dbgen/options"
	"github.com/freedqo/fmc-go-agent/scripts/cmd/dbgen/utils"
	"os"
	"sort"
	"strings"
	"text/template"
)

// CreateIfFile 创建接口文件
func CreateIfFile(dbName string, dMeta *gdb.DbMeta) error {
	// 路径和文件名
	dbIfPath := utils.JoinXdDirPath(options.DbIfRootPath, dbName+"_if")

	//创建目录
	if err := os.MkdirAll(dbIfPath, os.ModePerm); err != nil {
		return err
	}
	for _, tb := range dMeta.TableMeta {
		lowerTableName := strings.ToLower(tb.TableName)
		tbPknPath := utils.JoinXdDirPath(dbIfPath, lowerTableName+"_if")

		//创建目录
		if err := os.MkdirAll(tbPknPath, os.ModePerm); err != nil {
			return err
		}

		err := CreatTableGenIf(tbPknPath, lowerTableName, tb.ModelStructName, dbName)
		if err != nil {
			return err
		}

		err = CreatTableIf(tbPknPath, lowerTableName, dbName)
		if err != nil {
			return err
		}
	}
	err := CreatOneDbIf(dbIfPath, dMeta)
	if err != nil {
		return err
	}

	return nil
}

var tmpCreatTableIf = `package {{.TableName}}_if

type If interface {
	Gen() GenIf
	Self() SelfIf
}

type SelfIf interface {
}
`

func CreatTableIf(path string, lowTableName string, dbn string) error {
	// 定义模板数据
	var data struct {
		TableName string
	}
	data.TableName = lowTableName
	// 要写入的文件路径
	filename := options.IfFileName
	filePath := utils.JoinXdFilePath(path, options.IfFileName)
	exists, err := utils.FileExists(filePath)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}
	fmt.Printf("处理数据库%s,生成表%s集成和自定义读写接口文件,路径：%s\r\n", dbn, lowTableName, filePath)
	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatTableIf)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil
}

var tmpCreatTableGenIf = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package {{.TableName}}_if

import (
	"github.com/freedqo/fmc-go-agent/internal/fmc-go-agent-server/model/dalm/dbm/{{.DbName}}/model"
)

type GenIf interface {
	// Add 新增
	Add(data ...*model.{{.ModelStructName}}) error
	// Upt 更新
	Upt(data ...*model.{{.ModelStructName}}) error
	// Save 保存
	Save(data ...*model.{{.ModelStructName}}) error
	// Del 删除
	Del(data ...*model.{{.ModelStructName}}) error
	// First 查询第一条
	First(query *model.{{.ModelStructName}}) (data *model.{{.ModelStructName}},err error)
	// Find 通用查询
	Find(query *model.{{.ModelStructName}}_QueryReq) (data []*model.{{.ModelStructName}},total int64,err error)
}

`

func CreatTableGenIf(path string, lowTableName string, modelStructName string, dbName string) error {
	// 定义模板数据
	var data struct {
		TableName       string
		DbName          string
		ModelStructName string
	}
	data.TableName = lowTableName
	data.DbName = dbName
	data.ModelStructName = modelStructName
	// 要写入的文件路径
	filename := options.GenIfFileName
	filePath := utils.JoinXdFilePath(path, filename)

	fmt.Printf("处理数据库%s,生成表%s通用读写接口文件,路径：%s\r\n", dbName, modelStructName, filePath)
	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatTableGenIf)
	if err != nil {
		panic(err)
	}
	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil
}

var tmpCreatOneDbIf = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package {{.DbName}}_if

import (
    {{- range $tb := .TbPkNs}}
	"github.com/freedqo/fmc-go-agent/internal/fmc-go-agent-server/dal/db/dbif/{{$tb.DbName}}_if/{{$tb.TableName}}_if"
    {{- end}}
	"github.com/freedqo/fmc-go-agent/internal/fmc-go-agent-server/model/dalm/dbm/{{.DbName}}/query"
)

type If interface {
	GenQ() *query.Query
    {{- range $tb := .TbPkNs}}
	{{$tb.ModelStructName}}() {{$tb.TableName}}_if.If
    {{- end}}
}
`

type CreatOneDbIf_TbPkNs struct {
	TableName       string
	ModelStructName string
	DbName          string
}

func CreatOneDbIf(path string, dMeta *gdb.DbMeta) error {
	// 定义模板数据
	var data struct {
		DbName string
		TbPkNs []CreatOneDbIf_TbPkNs
	}
	data.DbName = dMeta.DbName
	data.TbPkNs = make([]CreatOneDbIf_TbPkNs, 0)
	for _, v := range dMeta.TableMeta {
		data.TbPkNs = append(data.TbPkNs, CreatOneDbIf_TbPkNs{
			TableName:       strings.ToLower(v.TableName), //表名称
			ModelStructName: v.ModelStructName,            //结构体名称
			DbName:          strings.ToLower(v.DbName),    //数据库名称
		})
	}
	sort.Slice(data.TbPkNs, func(i, j int) bool {
		return data.TbPkNs[i].ModelStructName < data.TbPkNs[j].ModelStructName
	})
	// 要写入的文件路径
	filename := options.IfGenFileName
	filePath := utils.JoinXdFilePath(path, filename)
	fmt.Printf("处理数据库%s,生成数据库集成接口文件,路径：%s\r\n", dMeta.DbName, filePath)

	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatOneDbIf)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil
}

var tmpCreatAllDbIf = `// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbif

import (
 	{{- range $db := .Dbs}}
	"github.com/freedqo/fmc-go-agent/internal/fmc-go-agent-server/dal/db/dbif/{{$db.DbName}}_if"
    {{- end}}
)

type If interface {
	{{- range $db := .Dbs}}
	{{$db.DbNameUp}}() {{$db.DbName}}_if.If
    {{- end}}
}
`

type CreatAllDbIf_DbnIfs struct {
	DbName   string
	DbNameUp string
}

func CreatAllDbIf(path string, dbMap map[string]string) error {
	// 定义模板数据
	var data struct {
		Dbs []CreatAllDbIf_DbnIfs
	}
	data.Dbs = make([]CreatAllDbIf_DbnIfs, 0)
	for k, v := range dbMap {
		data.Dbs = append(data.Dbs, CreatAllDbIf_DbnIfs{
			DbName:   k,
			DbNameUp: v,
		})
	}
	sort.Slice(data.Dbs, func(i, j int) bool {
		return data.Dbs[i].DbName < data.Dbs[j].DbName
	})
	// 要写入的文件路径
	filename := options.IfGenFileName
	filePath := utils.JoinXdFilePath(path, filename)

	// 解析模板
	tmpl, err := template.New(filename).Parse(tmpCreatAllDbIf)
	if err != nil {
		panic(err)
	}

	// 生成文件
	f, err := os.Create(filePath) // 输出文件名
	if err != nil {
		return err
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		return err
	}
	return nil
}
