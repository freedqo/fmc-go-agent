// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ai_chat_logs_gdb

import (
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/dal/db/dbif/urtyg_ai_agent_if/ai_chat_logs_if"
	"github.com/freedqo/fmc-go-agents/internal/fmc-go-agents-server/model/dalm/dbm/urtyg_ai_agent/model"
	"gorm.io/gorm"
)

func newGenIF(gdb *gorm.DB) ai_chat_logs_if.GenIf {
	return &GenIF{
		db: gdb,
	}
}

type GenIF struct {
	db *gorm.DB
}

// Add 批量添加数据
func (g *GenIF) Add(data ...*model.Ai_chat_logs) error {
	batchSize := 1000 // 每次插入 1000 条记录
	// 开启事务
	tx := g.db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()
	if tx.Error != nil {
		return tx.Error
	}
	for i := 0; i < len(data); i += 1000 {
		end := i + batchSize
		if end > len(data) {
			end = len(data)
		}
		batch := data[i:end]
		if err := tx.Create(batch).Error; err != nil {
			tx.Rollback()
			return err
		}
	}
	// 提交事务
	if err := tx.Commit().Error; err != nil {
		return err
	}
	return nil
}

// Upt 批量更新数据
func (g *GenIF) Upt(data ...*model.Ai_chat_logs) error {
	for _, item := range data {
		if err := g.db.Save(item).Error; err != nil {
			return err
		}
	}
	return nil
}

// Save 批量保存数据
func (g *GenIF) Save(data ...*model.Ai_chat_logs) error {
	return g.db.Save(data).Error
}

// Del 批量删除数据
func (g *GenIF) Del(data ...*model.Ai_chat_logs) error {
	return g.db.Delete(data).Error
}

// First 查询第一条数据
func (g *GenIF) First(query *model.Ai_chat_logs) (data *model.Ai_chat_logs, err error) {
	data = &model.Ai_chat_logs{}
	db := g.db

	if query != nil {
		db = db.Where(query)
	}

	result := db.First(data)
	err = result.Error
	if err == gorm.ErrRecordNotFound {
		data = nil
		err = nil
	}
	return data, err
}

// Find 根据查询条件查询数据
func (g *GenIF) Find(query *model.Ai_chat_logs_QueryReq) (data []*model.Ai_chat_logs, total int64, err error) {
	db := g.db

	if query != nil {
		// 定义一个通用函数来构建查询条件
		addQueryCondition := func(field string, value *string, isLike bool) {
			if value != nil {
				if isLike {
					db = db.Where(field+" LIKE ?", "%"+*value+"%")
				} else {
					db = db.Where(field+" = ?", *value)
				}
			}
		}

		// 调用通用函数添加各个字段的查询条件
		// 消息内容
		addQueryCondition("content", query.Content, query.IsLike)
		// 消息创建时间
		addQueryCondition("created_at", query.CreatedAt, query.IsLike)
		// 记录唯一id
		addQueryCondition("id", query.ID, query.IsLike)
		// 消息顺序
		addQueryCondition("order", query.Order, query.IsLike)
		// 消息角色
		addQueryCondition("role", query.Role, query.IsLike)
		// 会话唯一标识
		addQueryCondition("session_id", query.SessionID, query.IsLike)
		// 用户ID
		addQueryCondition("user_id", query.UserID, query.IsLike)

		// 排序
		if query.OrderBy != nil {
			db = db.Order(*query.OrderBy)
		}

		// 分页
		if query.Page != nil {
			offset := ((*query.Page).Index - 1) * (*query.Page).Size
			db = db.Offset(int(offset)).Limit((*query.Page).Size)
		}
	}

	// 查询总记录数
	countDB := db.Session(&gorm.Session{})
	err = countDB.Model(&model.Ai_chat_logs{}).Count(&total).Error
	if err != nil {
		return nil, 0, err
	}

	// 查询数据
	err = db.Find(&data).Error
	return data, total, err
}

var _ ai_chat_logs_if.GenIf = &GenIF{}
