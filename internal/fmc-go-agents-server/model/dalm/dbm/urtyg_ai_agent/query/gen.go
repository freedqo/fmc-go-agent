// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                     db,
		Ai_chat_logs:           newAi_chat_logs(db, opts...),
		Ai_knowledge_base:      newAi_knowledge_base(db, opts...),
		Ai_knowledge_chunks:    newAi_knowledge_chunks(db, opts...),
		Ai_knowledge_documents: newAi_knowledge_documents(db, opts...),
		Ai_mcp:                 newAi_mcp(db, opts...),
		Ai_prompt:              newAi_prompt(db, opts...),
		Ai_session_logs:        newAi_session_logs(db, opts...),
		Ai_tool:                newAi_tool(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Ai_chat_logs           ai_chat_logs
	Ai_knowledge_base      ai_knowledge_base
	Ai_knowledge_chunks    ai_knowledge_chunks
	Ai_knowledge_documents ai_knowledge_documents
	Ai_mcp                 ai_mcp
	Ai_prompt              ai_prompt
	Ai_session_logs        ai_session_logs
	Ai_tool                ai_tool
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Ai_chat_logs:           q.Ai_chat_logs.clone(db),
		Ai_knowledge_base:      q.Ai_knowledge_base.clone(db),
		Ai_knowledge_chunks:    q.Ai_knowledge_chunks.clone(db),
		Ai_knowledge_documents: q.Ai_knowledge_documents.clone(db),
		Ai_mcp:                 q.Ai_mcp.clone(db),
		Ai_prompt:              q.Ai_prompt.clone(db),
		Ai_session_logs:        q.Ai_session_logs.clone(db),
		Ai_tool:                q.Ai_tool.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Ai_chat_logs:           q.Ai_chat_logs.replaceDB(db),
		Ai_knowledge_base:      q.Ai_knowledge_base.replaceDB(db),
		Ai_knowledge_chunks:    q.Ai_knowledge_chunks.replaceDB(db),
		Ai_knowledge_documents: q.Ai_knowledge_documents.replaceDB(db),
		Ai_mcp:                 q.Ai_mcp.replaceDB(db),
		Ai_prompt:              q.Ai_prompt.replaceDB(db),
		Ai_session_logs:        q.Ai_session_logs.replaceDB(db),
		Ai_tool:                q.Ai_tool.replaceDB(db),
	}
}

type queryCtx struct {
	Ai_chat_logs           *ai_chat_logsDo
	Ai_knowledge_base      *ai_knowledge_baseDo
	Ai_knowledge_chunks    *ai_knowledge_chunksDo
	Ai_knowledge_documents *ai_knowledge_documentsDo
	Ai_mcp                 *ai_mcpDo
	Ai_prompt              *ai_promptDo
	Ai_session_logs        *ai_session_logsDo
	Ai_tool                *ai_toolDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Ai_chat_logs:           q.Ai_chat_logs.WithContext(ctx),
		Ai_knowledge_base:      q.Ai_knowledge_base.WithContext(ctx),
		Ai_knowledge_chunks:    q.Ai_knowledge_chunks.WithContext(ctx),
		Ai_knowledge_documents: q.Ai_knowledge_documents.WithContext(ctx),
		Ai_mcp:                 q.Ai_mcp.WithContext(ctx),
		Ai_prompt:              q.Ai_prompt.WithContext(ctx),
		Ai_session_logs:        q.Ai_session_logs.WithContext(ctx),
		Ai_tool:                q.Ai_tool.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
